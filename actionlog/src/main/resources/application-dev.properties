### modified to test pull request

spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=khoros_spotify
#spring.datasource.username=sa2
#spring.datasource.password=password*08
#spring.datasource.url=jdbc:sqlserver://34.93.16.194:1433;databaseName=KHOROS_STAGE
#spring.datasource.username=sqlserver
#spring.datasource.password=Sutherland2023
logging.level.com.example=DEBUG
spring.main.allow-bean-definition-overriding=true
server.port=8084
spring.datasource.url=jdbc:sqlserver://35.224.177.229:1433;databaseName=KHOROS_STAGE
spring.datasource.username=sqlserver
spring.datasource.password=khoros*08



khoros.api.conversationexport.url=https://analytics-api-emea.app.lithium.com/api/public/reports/report/conversation_history_action?companyKey=spotify&reportFormat=json&workqueueIds=140%2C431%2C492%2C502%2C451%2C641%2C653%2C659%2C650%2C649%2C594%2C656%2C662%2C665%2C642%2C654%2C660%2C651%2C647%2C597%2C657%2C663%2C666%2C644%2C668%2C270%2C643%2C655%2C661%2C652%2C648%2C595%2C658%2C664%2C667%2C186%2C596%2C361%2C318%2C321%2C553%2C349%2C320%2C319%2C438%2C552%2C554%2C414%2C560%2C705%2C429%2C679%2C678%2C680%2C681%2C682%2C669%2C675%2C673%2C671%2C670%2C676%2C674%2C672
khoros.api.auth.username=api-khoros-playvox@spotify.com
khoros.api.auth.password=45*D*v9DqjhG
khoros.api.time.interval=2
db.insert.logBatchSize=4000

actionlog.table.schema=CREATE TABLE CONVERSATION_ACTION_LOG_ (ID  BIGINT IDENTITY(1,1) PRIMARY KEY,CONVERSATION_ID NVARCHAR(255) ,SPOTIFY_DATA_TIME_INTERVAL_ID BIGINT,TIME_PERIOD VARCHAR(255),ACTION_PERFORMED NVARCHAR(255) ,ACTION_PERFORMEDDATE DATETIME ,HISTORY_ACTION NVARCHAR(max) ,ACTING_AGENT NVARCHAR(255) ,ACTING_AGENTEMAIL NVARCHAR(255) ,WORKQUEUE_CURRENT NVARCHAR(255) ,TAGS NVARCHAR(max),COMMENT NVARCHAR(max) ,NOTE NVARCHAR(max) ,CREATED_DATE DATETIME NOT NULL,CREATED_BY VARCHAR(20) NOT NULL,UPDATED_DATE DATETIME,UPDATED_BY VARCHAR(20) INDEX  idx_SPOTIFY_DATA_TIME_INTERVAL_ID (SPOTIFY_DATA_TIME_INTERVAL_ID));
actionlog.table.defaultName=CONVERSATION_ACTION_LOG
actionlog.table.rename=EXEC sp_rename 'oldName', 'newName';
actionlog.table.insert=INSERT INTO tablename (  "CONVERSATION_ID", "ACTION_PERFORMED", "ACTION_PERFORMEDDATE", "HISTORY_ACTION", "ACTING_AGENT", "ACTING_AGENTEMAIL", "WORKQUEUE_CURRENT", "TAGS", "COMMENT", "NOTE","TIME_PERIOD", "CREATED_DATE","CREATED_BY" , "SPOTIFY_DATA_TIME_INTERVAL_ID","UPDATED_DATE","UPDATED_BY") VALUES (  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?);
interval.table.records=SELECT TOP 1 ID FROM  SPOTIFY_DATA_TIME_INTERVALS
interval.table.records.latest=SELECT  MAX(t.END_TIME) AS END_TIME FROM SPOTIFY_DATA_TIME_INTERVALS t
interval.table.records.new=SELECT  TOP 1 *   FROM SPOTIFY_DATA_TIME_INTERVALS  WHERE BATCH_PROCESS_STATUS = 'NEW' AND PLAYVOX_STATUS = 'NEW' AND ACTION_LOG_STATUS = 'NEW' AND AUTHOR_STATUS  = 'NEW' order by START_TIME 
interval.table.insert=INSERT INTO  SPOTIFY_DATA_TIME_INTERVALS(PROCESS_DATE,START_TIME_EPOCH,END_TIME_EPOCH,START_TIME,END_TIME,ACTION_LOG_STATUS,AUTHOR_STATUS,CREATED_DATE,CREATED_BY,BATCH_PROCESS_STATUS,PLAYVOX_STATUS) VALUES (?,?,?,?,?,?,?,?,?,?,?)
interval.table.update=UPDATE SPOTIFY_DATA_TIME_INTERVALS SET ACTION_LOG_STATUS = ?,ACTION_LOG_STATUS_UPDATED_AT = ? WHERE ID = ?
retry.policy.count=5
retry.policy.timeperiod=20000

